{"version":3,"sources":["features/inputSlice.ts","features/todoSlice.ts","features/statusSlice.ts","components/Form.tsx","components/Todo.tsx","features/filteredTodosSlice.ts","components/TodoList.tsx","App.tsx","app/store.ts","index.tsx"],"names":["inputtextSlice","createSlice","name","initialState","inputText","reducers","setinputText","state","action","payload","actions","selectInputText","inputtext","todoSlice","todos","settodos","selectTodo","todo","statusSlice","staTus","setStatus","selectStatus","status","Form","useSelector","dispatch","useDispatch","onChange","e","target","value","type","className","onClick","preventDefault","text","isCompleted","id","uuid","icon","faPlusSquare","Todo","props","map","el","faCheck","filter","faTrash","filteredTodoSlice","filteredTodos","setfilteredTodos","selectFilteredTodos","filteredtodo","TodoList","key","App","useEffect","filterHandler","store","configureStore","reducer","inputtextReducer","todoReducer","statusReducer","filteredtodoReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca36113b.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { RootState } from '../app/store';\n\ninterface InputState {\n  inputText: string;\n}\n\nconst initialState: InputState = {\n  inputText: '',\n};\n\nexport const inputtextSlice = createSlice({\n  name: 'inputtext',\n  initialState,\n  reducers: {\n    setinputText: (state, action) => {\n      state.inputText = action.payload;\n    },\n  },\n});\n\nexport const { setinputText } = inputtextSlice.actions;\n\nexport const selectInputText = (state: RootState) => state.inputtext.inputText;\n\nexport default inputtextSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\nimport {RootState } from '../app/store';\n\ninterface InputState {\n  todos: [];\n}\n\nconst initialState: InputState = {\n  todos: [],\n};\n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    settodos: (state, action) => {\n      state.todos = action.payload;\n    },\n  },\n});\n\nexport const { settodos } = todoSlice.actions;\n\nexport const selectTodo = (state: RootState) => state.todo.todos;\n\nexport default todoSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { RootState } from '../app/store';\n\ninterface InputState {\n  staTus: string;\n}\n\nconst initialState: InputState = {\n  staTus: 'all',\n};\n\nexport const statusSlice = createSlice({\n  name: 'status',\n  initialState,\n  reducers: {\n    setStatus: (state, action) => {\n      state.staTus = action.payload;\n    },\n  },\n});\n\nexport const { setStatus } = statusSlice.actions;\n\nexport const selectStatus = (state: RootState) => state.status.staTus;\n\nexport default statusSlice.reducer;\n","import React from 'react';\nimport { v4 as uuid } from 'uuid';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setinputText, selectInputText } from '../features/inputSlice';\nimport { settodos } from '../features/todoSlice';\nimport { selectTodo } from '../features/todoSlice';\nimport { setStatus } from '../features/statusSlice';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlusSquare } from '@fortawesome/free-solid-svg-icons';\n\nexport const Form = () => {\n  const todos = useSelector(selectTodo);\n  const inputText = useSelector(selectInputText);\n  const dispatch = useDispatch();\n  const inputTextHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(setinputText(e.target.value));\n  };\n  const submitTodoHandler = (e: React.MouseEvent) => {\n    e.preventDefault();\n    if (inputText !== '') {\n      dispatch(\n        settodos([\n          ...todos,\n          { text: inputText, isCompleted: false, id: uuid() },\n        ])\n      );\n    }\n\n    dispatch(setinputText(''));\n  };\n  const statusHandler = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(setStatus(e.target.value));\n  };\n  return (\n    <form>\n      <input\n        onChange={inputTextHandler}\n        type=\"text\"\n        className=\"todo-input\"\n        value={inputText}\n      />\n      <button className=\"todo-button\" type=\"submit\" onClick={submitTodoHandler}>\n        <FontAwesomeIcon icon={faPlusSquare} />\n      </button>\n\n      <div className=\"select\">\n        <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\n          <option value=\"all\">All</option>\n          <option value=\"completed\">Completed</option>\n          <option value=\"uncompleted\">Uncompleted</option>\n        </select>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { settodos, selectTodo } from '../features/todoSlice';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheck, faTrash } from '@fortawesome/free-solid-svg-icons';\ninterface Props {\n  text: Text;\n  todo: any;\n}\n\nexport const Todo = (props: Props) => {\n  const todos = useSelector(selectTodo);\n  const dispatch = useDispatch();\n  const deleteHandler = () => {\n    dispatch(settodos(todos.filter((el: any) => el.id !== props.todo.id)));\n  };\n  const completeHandler = () => {\n    dispatch(\n      settodos(\n        todos.map((el: any) => {\n          if (el.id === props.todo.id) {\n            return { ...el, isCompleted: !el.isCompleted };\n          }\n          return el;\n        })\n      )\n    );\n  };\n\n  return (\n    <div className=\"todo\">\n      <li className={`todo-item ${props.todo.isCompleted ? 'completed' : ''}`}>\n        {props.text}\n      </li>\n      <button className=\"complete-btn\" onClick={completeHandler}>\n        <FontAwesomeIcon icon={faCheck} />\n      </button>\n      <button className=\"trash-btn\" onClick={deleteHandler}>\n        <FontAwesomeIcon icon={faTrash} />\n      </button>\n    </div>\n  );\n};\n","import { createSlice } from '@reduxjs/toolkit';\nimport { RootState } from '../app/store';\n\ninterface InputState {\n  filteredTodos: [];\n}\n\nconst initialState: InputState = {\n  filteredTodos: [],\n};\n\nexport const filteredTodoSlice = createSlice({\n  name: 'filteredtodo',\n  initialState,\n  reducers: {\n    setfilteredTodos: (state, action) => {\n      state.filteredTodos = action.payload;\n    },\n  },\n});\n\nexport const { setfilteredTodos } = filteredTodoSlice.actions;\n\nexport const selectFilteredTodos = (state: RootState) =>\n  state.filteredtodo.filteredTodos;\n\nexport default filteredTodoSlice.reducer;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Todo } from './Todo';\nimport { selectFilteredTodos } from '../features/filteredTodosSlice';\n\nexport const TodoList = () => {\n  const filteredtodo = useSelector(selectFilteredTodos);\n  return (\n    <div className=\"todo-container\">\n      <ul className=\"todo-list\">\n        {filteredtodo.map((todo: any) => {\n          return <Todo key={todo.id} text={todo.text} todo={todo} />;\n        })}\n      </ul>\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport { Form } from './components/Form';\r\nimport { TodoList } from './components/TodoList';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { selectTodo } from './features/todoSlice';\r\nimport { setfilteredTodos } from './features/filteredTodosSlice';\r\nimport { selectStatus } from './features/statusSlice';\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const status = useSelector(selectStatus);\r\n  const todos = useSelector(selectTodo);\r\n  useEffect(() => {\r\n    filterHandler();\r\n  }, [todos, status]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const filterHandler = () => {\r\n    switch (status) {\r\n      case 'completed':\r\n        dispatch(\r\n          setfilteredTodos(\r\n            todos.filter((todo: any) => todo.isCompleted === true)\r\n          )\r\n        );\r\n        break;\r\n      case 'uncompleted':\r\n        dispatch(\r\n          setfilteredTodos(\r\n            todos.filter((todo: any) => todo.isCompleted === false)\r\n          )\r\n        );\r\n        break;\r\n      default:\r\n        dispatch(setfilteredTodos(todos));\r\n        break;\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1>Todo List</h1>\r\n      </header>\r\n      <Form />\r\n      <TodoList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\n\r\nimport inputtextReducer from '../features/inputSlice';\r\nimport todoReducer from '../features/todoSlice';\r\nimport statusReducer from '../features/statusSlice';\r\nimport filteredtodoReducer from '../features/filteredTodosSlice';\r\nexport const store = configureStore({\r\n  reducer: {\r\n    inputtext: inputtextReducer,\r\n    todo: todoReducer,\r\n    status: statusReducer,\r\n    filteredtodo: filteredtodoReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}